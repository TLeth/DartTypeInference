library tests.all;

import 'assign_and_int.dart';
import 'binop_or_int.dart';
import 'assign_div_num.dart';
import 'binop_plus_double.dart';
import 'assign_minus_num.dart';
import 'binop_plus_int.dart';
import 'assign_mod_num.dart';
import 'binop_sleft_int.dart';
import 'assign_mult_num.dart';
import 'binop_sright_int.dart';
import 'assign_or_int.dart';
import 'binop_xor_int.dart';
import 'assign_plus_num.dart';
import 'assign_sleft_num.dart';
import 'assign_sright_num.dart';
import 'conditional_int.dart';
import 'assign_xor_int.dart';
import 'conditional_num.dart';
import 'binop_and_int.dart';
import 'const.dart';
import 'binop_divhole_double.dart';
import 'binop_divhole_int.dart';
import 'final.dart';
import 'binop_divide_double.dart';
import 'func_exp.dart';
import 'binop_divide_int.dart';
import 'func_exp_arg.dart';
import 'binop_eq.dart';
import 'binop_ge.dart';
import 'methods.dart';
import 'binop_gt.dart';
import 'operator_bracket.dart';
import 'binop_le.dart';
import 'operator_bracketeq.dart';
import 'binop_lt.dart';
import 'unary_minus_int.dart';
import 'binop_mod_double.dart';
import 'unary_negate_int.dart';
import 'binop_mod_int.dart';
import 'var_assign_dyn.dart';
import 'binop_mult_double.dart';
import 'var_assign_str.dart';
import 'binop_mult_int.dart';
import 'function_anon_function_arg.dart';
import 'function_arg_dynamic.dart';
import 'function_arg_type.dart';
import 'function_function_arg.dart';
import 'function_string_id.dart';
import 'function_string_id_res.dart';
import 'is_exp.dart';
import 'as_exp.dart';
import 'parantheses.dart';
import 'field.dart';
import 'field_parent.dart';
import 'static_field.dart';
import 'constructor.dart';
import 'constructor_super.dart';
import 'constructor_supernamed.dart';
import 'named_constructor.dart';
import 'constructor_field.dart';
import 'constructor_superfield.dart';
import 'constructor_fieldinit.dart';
import 'constructor_redirect.dart';
import 'constructor_redirectnamed.dart';
import 'factory.dart';
import 'getter.dart';
import 'setter.dart';
import 'superexp.dart';
import 'for_cond.dart';
import 'while_cond.dart';
import 'dowhile_cond.dart';
import 'if_cond.dart';
import 'cond_exp.dart';
import 'getter_method.dart';
import 'setter_method.dart';
import 'anon_function.dart';
import 'setter_staticmethod.dart';
import 'getter_staticmethod.dart';
import 'gettersetter.dart';
import 'method_gettersetter.dart';
import 'static_gettersetter.dart';
import 'generic_class.dart';
import 'generic_typedef.dart';
import 'generic_noconstructor.dart';
import 'generic_namedconstructor.dart';
import 'generic_constructor.dart';
import 'generic_notype.dart';
import 'generic_multi.dart';
import 'casq_ctor.dart';
import 'logic_and.dart';
import 'logic_or.dart';
import 'logic_not.dart';
import 'functype_var.dart';
import 'functype_merg.dart';
import 'default_optparameter.dart';
import 'default_namedparameter.dart';
import 'default_fieldparameter.dart';
import 'func_arg_var.dart';
import 'generic_field.dart';
import 'generic_method.dart';
import 'generic_field2.dart';
import 'generic_field3.dart';
import 'generic_factory.dart';
import 'generic_parentmethod.dart';
import 'generic_list.dart';
import 'generic_lub.dart';
import 'generic_list_last.dart';
import 'generic_list_foreach.dart';
import 'list_return.dart';
import 'generic_factory2.dart';
import 'generic_formalfuncparam.dart';
import 'class_fieldssuper.dart';
import 'generic_parentfield.dart';
import 'future_then.dart';

void main() {}
